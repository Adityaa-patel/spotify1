# import spotipy
# import pandas as pd
# import os
# import time
# from APIsetup import sp  # Import the sp object
# from dotenv import load_dotenv
# import logging

# load_dotenv()

# output_file_path = 'C:\\githubb\\.venv\\spotify1\\output.csv'

# # Check if CSV file exists, if not create one with the desired header
# if not os.path.exists(output_file_path):
#     df = pd.DataFrame(columns=[
#         'ts', 'ms_played', 'master_metadata_track_name',
#         'master_metadata_album_artist_name', 'master_metadata_album_album_name',
#         'spotify_track_uri'
#     ])
#     df.to_csv(output_file_path, index=False)

# # Configure logging
# logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# def writeOneEntry(entry, output_file_path):
#     """
#     Writes a single entry to the CSV file, ensuring proper quoting for fields with commas.
#     """
#     df = pd.DataFrame([entry])
#     df.to_csv(output_file_path, mode='a', header=False, index=False, quoting=1)  # quoting=1 ensures quotes for fields with special characters



# def logCurrentSongNewWay(sp, output_file_path):

#     """
#         sp is authenticated Spotify API client.
#     """
#     last_track_id = None
#     last_track_start_time = None
#     last_track_logged = None

#     try:
#         while True:
#             try:
#                 current_track = sp.current_user_playing_track()
#             except Exception as e:
#                 logging.error(f"Error fetching current track: {e}")
#                 time.sleep(10)
#                 continue

#             if current_track and current_track.get('is_playing'):
#                 track_item = current_track.get('item')
#                 if not track_item:
#                     logging.warning("No track item found in response.")
#                     time.sleep(10)
#                     continue

#                 track_id = track_item.get('id')
#                 track_name = track_item.get('name')
#                 album_name = track_item.get('album', {}).get('name')
#                 artists = ', '.join([artist.get('name') for artist in track_item.get('artists', [])])
#                 # Convert timestamp from ms to ISO format (UTC)
#                 timestamp = pd.to_datetime(current_track['timestamp'], unit='ms').isoformat() + 'Z'
#                 spotify_uri = track_item.get('uri')

#                 # When a new track starts, update ms_played for the previous track
#                 if track_id != last_track_id:
#                     if last_track_id is not None and last_track_start_time is not None:
#                         ms_played = current_track['timestamp'] - last_track_start_time
#                         if last_track_logged is not None:
#                             last_track_logged['ms_played'] = ms_played
#                             writeOneEntry(last_track_logged, output_file_path)
#                             logging.info(f"Updated ms_played for the previous track: {ms_played} ms")

#                     # Log the new track with ms_played initially as 0
#                     new_entry = {
#                         'ts': timestamp,
#                         'ms_played': 0,
#                         'master_metadata_track_name': track_name,
#                         'master_metadata_album_artist_name': artists,
#                         'master_metadata_album_album_name': album_name,
#                         'spotify_track_uri': spotify_uri
#                     }
#                     logging.info(f"Logged: {track_name} by {artists} at {timestamp}")

#                     # Update last track variables
#                     last_track_id = track_id
#                     last_track_start_time = current_track['timestamp']
#                     last_track_logged = new_entry

#             elif last_track_id is not None:
#                 # if playback stops it updates ms_played for the last track
#                 if last_track_start_time is not None:
#                     ms_played = int(time.time() * 1000) - last_track_start_time
#                     if last_track_logged is not None:
#                         last_track_logged['ms_played'] = ms_played
#                         writeOneEntry(last_track_logged, output_file_path)
#                         logging.info(f"Updated ms_played for the previous track: {ms_played} ms")
#                 # Reset variables
#                 last_track_id = None
#                 last_track_start_time = None
#                 last_track_logged = None
#                 logging.info("Playback stopped or track skipped.")

#             else:
#                 logging.info("No songs playing right now, Logging stopped....")
#                 break

#             time.sleep(1)  # checks every 10 seconds
#     except KeyboardInterrupt:
#         logging.info("Exiting logCurrentNewWay due to keyboard interrupt.")


# def logCurrentSongOldWay(sp, output_file_path):
#     last_track_id = None
#     last_track_start_time = None
#     last_track_logged = None

#     while True:
#         # Fetch currently playing track
#         current_track = sp.current_user_playing_track()

#         if current_track is not None and current_track['is_playing']:
#             track_id = current_track['item']['id']
#             track_name = current_track['item']['name']
#             album_name = current_track['item']['album']['name']
#             artists = ', '.join([artist['name'] for artist in current_track['item']['artists']])
#             timestamp = pd.to_datetime(current_track['timestamp'], unit='ms')
#             spotify_uri = current_track['item']['uri']
#             reason_start = 'unknown'
#             reason_end = 'endplay'

#             if track_id != last_track_id:
#                 # Calculate and update ms_played for the previous track
#                 if last_track_id is not None and last_track_start_time is not None:
#                     ms_played = current_track['timestamp'] - last_track_start_time
#                     # Update the previous entry in the CSV with ms_played
#                     if last_track_logged is not None:
#                         last_track_logged['ms_played'] = ms_played
#                         df = pd.DataFrame([last_track_logged])
#                         df.to_csv(output_file_path, mode='a', header=False, index=False)
#                         print(f"Updated ms_played for the previous track: {ms_played} ms")

#                 # Log the new track
#                 new_entry = {
#                     'ts': timestamp,
#                     'ms_played': 0,  # Placeholder, updated when track changes or stops
#                     'master_metadata_track_name': track_name,
#                     'master_metadata_album_artist_name': artists,
#                     'master_metadata_album_album_name': album_name,
#                     'spotify_track_uri': spotify_uri,
#                     'reason_start': reason_start,
#                     'reason_end': reason_end,
#                     'offline_timestamp': 0  # Placeholder for offline timestamp
#                 }

#                 print(f"Logged: {track_name} by {artists} at {timestamp}")

#                 # Update last track variables
#                 last_track_id = track_id
#                 last_track_start_time = current_track['timestamp']
#                 last_track_logged = new_entry

#         elif last_track_id is not None:
#             # Calculate and update ms_played for the last track when playback stops
#             if last_track_start_time is not None:
#                 ms_played = int(time.time() * 1000) - last_track_start_time
#                 if last_track_logged is not None:
#                     last_track_logged['ms_played'] = ms_played
#                     df = pd.DataFrame([last_track_logged])
#                     df.to_csv(output_file_path, mode='a', header=False, index=False)
#                     print(f"Updated ms_played for the previous track: {ms_played} ms")
#             last_track_id = None
#             last_track_start_time = None
#             last_track_logged = None
#             print("Playback stopped or track skipped.")

#         else:
#             print("No track is currently playing.")

#         time.sleep(10)  # Check every 10 seconds

# logCurrentSongNewWay(sp, output_file_path)



import spotipy
import pandas as pd
import os
import time
import logging
import asyncio
from APIsetup import sp  # Authenticated Spotify API client
from dotenv import load_dotenv
from typing import Dict, Optional, List

load_dotenv()

OutputFilePath = 'C:\\githubb\\.venv\\spotify1\\output.csv'
csvHeader = [
    'ts', 'ms_played', 'master_metadata_track_name',
    'master_metadata_album_artist_name', 'master_metadata_album_album_name',
    'spotify_track_uri'
]

# Ensure CSV file exists with header
if not os.path.exists(OutputFilePath):
    pd.DataFrame(columns=csvHeader).to_csv(OutputFilePath, index=False)

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


class SpotifyLogger:

    def __init__(self, sp_client: spotipy.Spotify, output_file: str, poll_interval: int = 1, buffer_size: int = 10):
        """
            sp_client: authenticated Spotipy client object
            poll_interval: time interval in sec to check for the current song
            buffer_size: The number of entries to store before writing to CSV.
        """
        self.sp = sp_client
        self.output_file = output_file
        self.poll_interval = poll_interval
        self.buffer_size = buffer_size
        self.entry_buffer: List[Dict] = []
        self.last_track_id: Optional[str] = None
        self.last_track_start_time: Optional[int] = None
        self.last_track_logged: Optional[Dict] = None

    def writeOneEntry(self, entry: Dict):
 
        self.entry_buffer.append(entry)
        logging.info(f"Entry added to buffer: {entry.get('master_metadata_track_name', 'N/A')}")
        if len(self.entry_buffer) >= self.buffer_size:
            self.writeBuffer()

    def writeBuffer(self):
        
        if self.entry_buffer:
            df = pd.DataFrame(self.entry_buffer)
            file_exists = os.path.exists(self.output_file)
            if file_exists:
                df.to_csv(self.output_file, mode='a', header=False, index=False, quoting=1)
            else:
                df.to_csv(self.output_file, index=False, quoting=1)
            logging.info(f"Wrote {len(self.entry_buffer)} entries to CSV.")
            self.entry_buffer = []

    def updateLastTrack(self, current_timestamp: int):
        #Updates ms_played for the previous tracks
        if self.last_track_start_time is not None and self.last_track_logged:
            ms_played = current_timestamp - self.last_track_start_time
            self.last_track_logged['ms_played'] = ms_played
            self.writeOneEntry(self.last_track_logged)
            logging.info(f"Updated ms_played: {ms_played} ms for '{self.last_track_logged.get('master_metadata_track_name', 'N/A')}'")

    async def getCurrentSong(self):
        """
        Asynchronously poll for the current playing track and log the information using buffered writing.
        """
        try:
            while True:
                try:
                    current_track = self.sp.current_user_playing_track()
                except Exception as e:
                    logging.error(f"Error fetching current track: {e}")
                    await asyncio.sleep(10)
                    continue

                if current_track and current_track.get('is_playing'):
                    track_item = current_track.get('item')
                    if not track_item:
                        logging.warning("No track item found in response.")
                        await asyncio.sleep(self.poll_interval)
                        continue

                    track_id = track_item.get('id')
                    track_name = track_item.get('name')
                    album_name = track_item.get('album', {}).get('name')
                    artists = ', '.join(artist.get('name') for artist in track_item.get('artists', []))
                    timestamp = pd.to_datetime(current_track['timestamp'], unit='ms').isoformat() + 'Z'
                    spotify_uri = track_item.get('uri')
                    current_timestamp = current_track['timestamp']

                    if track_id != self.last_track_id:
                        if self.last_track_id is not None:
                            self.updateLastTrack(current_timestamp)

                        new_entry = {
                            'ts': timestamp,
                            'ms_played': 0,
                            'master_metadata_track_name': track_name,
                            'master_metadata_album_artist_name': artists,
                            'master_metadata_album_album_name': album_name,
                            'spotify_track_uri': spotify_uri
                        }
                        logging.info(f"New track: {track_name} by {artists} at {timestamp}")
                        self.last_track_id = track_id
                        self.last_track_start_time = current_timestamp
                        self.last_track_logged = new_entry
                        self.writeOneEntry(new_entry)

                elif self.last_track_id is not None:
                    self.updateLastTrack(int(time.time() * 1000))
                    logging.info("Playback stopped or track skipped.")
                    self.last_track_id = None
                    self.last_track_start_time = None
                    self.last_track_logged = None
                    # Write any remaining entries in the buffer
                    self.writeBuffer()

                else:
                    logging.info("No song playing. Continuing to monitor...")

                await asyncio.sleep(self.poll_interval)
        except asyncio.CancelledError:
            logging.info("Logging cancelled.")
        finally:
            # Ensure any remaining entries in the buffer are written on exit
            if hasattr(self, 'entry_buffer') and self.entry_buffer:
                self.writeBuffer()


if __name__ == "__main__":
    poll_rate = int(os.getenv("SPOTIFY_POLL_INTERVAL", 5))  # Default 5 sec
    buffer_size = int(os.getenv("SPOTIFY_BUFFER_SIZE", 10))  # Default buffer size 10
    spotify_logger = SpotifyLogger(sp, OutputFilePath, poll_rate, buffer_size)
    try:
        asyncio.run(spotify_logger.getCurrentSong())
    except KeyboardInterrupt:
        logging.info("Exiting due to keyboard interrupt.")